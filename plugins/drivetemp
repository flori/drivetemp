#!/usr/bin/env ruby

# Example config:
#[drivetemp]
#user root
#env.drives /dev/disk/by-id/*
#env.smartctl_args_usb_TrekStor_DS_maxi_g_u_200812220790 -d sat
#env.smartctl_args --nocheck=standby

def scan_for(cmd, pattern)
  ENV['debug'].to_i == 1 and warn cmd
  `#{cmd}`.each_line { |l| m = l.match(pattern) and return m.captures }
  nil
end

def fetch_drives
  drives = Dir[ENV['drives'] || '/dev/disk/by-id/*']
  drives = drives.inject({}) do |h, d|
    real_name = File.symlink?(d) ? File.readlink(d) : d
    real_name = File.expand_path(File.basename(real_name), '/dev')
    if real_name !~ /\d\Z/
      h[d] = real_name
    end
    h
  end
  seen = {}
  for (df, dt) in drives.sort
    seen[dt] and drives.delete df
    seen[dt] = true
  end
  drives.sort_by { |_, dt| dt }
end

def find_executable(name)
  path = (ENV[name] || `which #{name}`).chomp
  case
  when path.strip.empty?
    fail "couldn't find #{name} exectuable"
  when !File.executable?(path)
    fail "#{path.inspect} isn't an executable"
  end
  path
end

def grep_args_for(device)
  ENV.each do |key, value|
    if key =~ /\Asmartctl_args_(.+)/
      device_prefix = $1
      device_prefix.tr!('^a-zA-Z0-9', '_')
      device_match = File.basename(device).tr('^a-zA-Z0-9', '_')
      device_match =~ /\A#{device_prefix}/ and return value
    end
  end
  nil
end

def scan_for_temperatures
  smartctl_args = ENV['smartctl_args'] || ''
  for (df, dt) in $drives
    args = if smartctl_drive_args = grep_args_for(df)
             smartctl_args + " #{smartctl_drive_args}"
           else
             smartctl_args
           end
    if a = scan_for(
        "#$smartctl --all #{dt} #{args}",
        /\sTemperature_Celsius\s.*?(\d+)\s+(?:\(.*\))?\Z/)
    then
      temperature = a.first
      yield df, dt, temperature
    end
  end
end

$smartctl = find_executable('smartctl')
$drives = fetch_drives

case ARGV.first
when 'autoconf'
  puts 'no'
when 'config'
  puts 'graph_title Drive temperature'
  puts 'graph_args --base 1000 -l 0'
  puts "graph_vlabel temp in \u00B0C"
  puts 'graph_category sensors'
  puts 'graph_info This graph shows the temperature in degrees Celsius of the hard drives in the machine.'
  scan_for_temperatures do |df, dt, temperature|
    df, dt = File.basename(df), File.basename(dt)
    puts "#{df.tr('.', '_')}.label #{dt}"
  end
else
  scan_for_temperatures do |df, dt, temperature|
    df = File.basename(df)
    puts "#{df.tr('.', '_')}.value #{temperature}"
  end
end
